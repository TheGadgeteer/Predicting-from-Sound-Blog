{
  
    
        "post0": {
            "title": "Predicting from Sound",
            "content": "Introduction . The objective of this project was to find ways of obtaining information from sounds using neural networks. In particular, we are trying to predict the source of a sound as well as the distance between source and microphone given a specific audio sample. To approach the detection of the sound source, we are constructing a neural network based on a submission 1 to the Freesound General-Purpose Audio Tagging Challenge, a competition with the goal of classifying audio files from a wide range of real-world environments. . Audio theory . In this section, essential theoretical elements of audio analysis are introduced. . Pulse-code modulation (PCM) . In order to store an analog audio signal in memory, it has to be digitized by applying sampling and quantization. Sampling refers to measuring the signal values at specific timesteps, which produces a time-discrete signal from an time-continuous signal. Quantization means mapping the continuous signal values to discrete values in a specific range, e.g. 16 bits. . . PCM is a format that stores uncompressed audio signals by simply storing an array of values that have been produced by sampling and quantizing an analog signal. It has two basic properties: The sampling rate (how many samples per second were taken) and the bit depth (how many bits each sample value has), which determines the resolution. A typical sampling rate is 44.1 kHz (e.g. CDs), and 16 bits is a common choice for the bit depth. In python, the data and sampling rate can be read from an audio file in wav format using the librosa library: . import numpy as np import matplotlib.pyplot as plt import librosa # loading an example audio file of a trumpet sound audio, sample_rate = librosa.load(librosa.ex(&#39;trumpet&#39;)) print(&quot;Sampling rate:&quot;, sample_rate) print(&quot;Length: %g seconds&quot;%(len(audio) / sample_rate)) plt.plot(np.linspace(0, len(audio)/sample_rate, len(audio)), audio) plt.xlabel(&#39;time in s&#39;) plt.show() . Sampling rate: 22050 Length: 5.33338 seconds . Spectograms . A spectrogram is a visualiziaton of the frequency spectrum of a signal over time. The frequency spectrum basically represents the signal strength of various frequencies present in the signal. It is depicted as a heat map, which means the intensity at a specific frequency and time is shown by varying the color. TODO: add example Spectogram . TODO: Features to extract from an audio signal spectral features (frequency-based), e.g. spectral centroid, spectral density ... . MFCC (Mel-Frequency Cepstral Coefficients) . The MFCCs of a signal are a small set of features (10-20) that concisely describe the overall shape of a spectrum. . The Dataset . As a dataset for testing and training, we are using the one provided for the 2018 Kaggle Freesound competition, which is downloadable here. It contains sounds from 41 different categories such as trumpet or fireworks, with 9473 training examples and 1600 test examples. However the samples aren&#39;t distributed uniformly over the categories, meaning there&#39;s more data for some categories than for others. Also, the amount of manually verified samples varies from category to category. This might cause the training to become more challenging. . . Creating the network . We are using Keras as the deep learning library to construct our network. . Network input . A major design decision is in which format the input audio signal will be fed to the network. Theoretically, raw array is possible . Creating a spectogram and feeding it as image . Using MFCC . Librosa is a python library to analyse audio signals. It provides several functions to extract features from audio data, which we will be using to preprocess the network input. . At this point we must decide in which format we will provide the network input. The dataset samples are given as raw audio data files, which could be directly used as input. However this has several disadvantages, one of them being the extensive memory usage. Loading the entire dataset into memory might exceed our capacities. A so-called data generator can provide relief. It loads the samples one by one in real-time during training and testing instead of using the naive approach of loading all samples at once. The code for such a data generator can be found at https://stanford.edu/~shervine/blog/keras-how-to-generate-data-on-the-fly. . Still, computations on large data are more time-consuming, especially when they are loaded into memory on-the-fly like it is the case for a data generator. A better idea might be to extract features from the raw audio files and use these as input. This essentially compresses the input, which makes the use of a data generator unnecessary and greatly accelerates the training process. . Therefore as a processing step, we are extracting so-called MFCC audio features from our input data using the Librosa library. The MFCC data are created one by one for each sample and stored in a variable X. This process is quite time-consuming. After it is done, we finally normalize the generated input data. . Now, we build our network model. The model starts with a convolutional layer followed by ReLU activation and a maxpool layer. Batch normalization is applied by inserting the corresponding layer before the activation function. This structure is repeated 3 more times, then the model ends with a fully connected layer of size 64 with batch normalization. The final output is given by a softmax layer which produces a probability distribution over the 41 classes. . As a loss function, we use cross entropy, and the Adam optimizer is used for training. . To prepare the output, we are converting the raw labels to integer indices and are setting the filename as the index for the train and test data: . Results and Conclusion . Training for 30 epochs results in a promising training accuracy of around 90%. However the network currently shows strong overfitting, as the accuracy on the validation set barely reaches 40%. Further investigation is needed in order to find ways to reduce this massive gap. . Future work includes exploring other ways to obtain information from sounds, for example predicting the distance from a sound source given a sound sample. . References . 1. https://www.kaggle.com/fizzbuzz/beginner-s-guide-to-audio-data/↩ . 2. https://en.wikipedia.org/wiki/Pulse-code_modulation↩ .",
            "url": "https://thegadgeteer.github.io/Predicting-from-Sound-Blog/jupyter/2021/06/14/blog.html",
            "relUrl": "/jupyter/2021/06/14/blog.html",
            "date": " • Jun 14, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Predicting from Sound",
            "content": "Introduction . The objective of this project is to find ways of obtaining information from sounds using neural networks. Examples of such information include the source of a sound as well as the distance of the source to the microphone. To approach the detection of the sound source, we are constructing a neural network based on a submission 1 to the Freesound General-Purpose Audio Tagging Challenge, a competition with the goal of classifying audio files from a wide range of real-world environments. . The Dataset . As a dataset for testing and training, we are using the one provided for the 2018 Kaggle Freesound competition, which is downloadable here. It contains sounds from 41 different categories such as trumpet or fireworks, with 9473 training examples and 1600 test examples. However the samples aren&#39;t distributed uniformly over the categories, meaning there&#39;s more data for some categories than for others. Also, the amount of manually verified samples varies from category to category. This might cause the training to become more challenging. . . Audio theory . In this section, essential theoretical elements of audio analysis are introduced. . Pulse-code modulation (PCM) . In order to store an analog audio signal in memory, it has to be digitized by applying sampling and quantization. Sampling refers to measuring the signal values at specific timesteps, which produces a time-discrete signal from an time-continuous signal. Quantization means mapping the continuous signal values to discrete values in a specific range, e.g. 16 bits. . . PCM is a format that stores uncompressed audio signals by simply storing an array of values that have been produced by sampling and quantizing an analog signal. It has two basic properties: The sampling rate (how many samples per second were taken) and the bit depth (how many bits each sample value has), which determines the resolution. A typical sampling rate is 44.1 kHz (e.g. CDs), and 16 bits is a common choice for the bit depth. The data and sampling rate can be read from an audio file in wav format with scipy as follows: . import matplotlib.pyplot as plt from scipy.io import wavfile rate, data = wavfile.read(&#39;audiofile.wav&#39;) print(&quot;Sampling rate:&quot;, rate) # if bit depth is 16, data is stored as a numpy int16 array print(&quot;Data:&quot;, data) plt.plot(data) . Spectograms . A spectrogram is a visualiziaton of the frequency spectrum of a signal over time. The frequency spectrum basically represents the signal strength of various frequencies present in the signal. It is depicted as a heat map, which means the intensity at a specific frequency and time is shown by varying the color. TODO: add example Spectogram . TODO: Features to extract from an audio signal spectral features (frequency-based), e.g. spectral centroid, spectral density ... . MFCC (Mel-Frequency Cepstral Coefficients) . The MFCCs of a signal are a small set of features (10-20) that concisely describe the overall shape of a spectrum. . Creating the network . We are using Keras as the deep learning library to construct our network. . Network input . A major design decision is in which format the input audio signal will be fed to the network. Theoretically, raw array is possible . Creating a spectogram and feeding it as image . Using MFCC . Librosa is a python library to analyse audio signals. It provides several functions to extract features from audio data, which we will be using to preprocess the network input. . import librosa import numpy as np import scipy from keras import losses, models, optimizers from keras.activations import relu, softmax from keras.callbacks import (EarlyStopping, LearningRateScheduler, ModelCheckpoint, TensorBoard, ReduceLROnPlateau) from keras.layers import (Convolution1D, Dense, Dropout, GlobalAveragePooling1D, GlobalMaxPool1D, Input, MaxPool1D, concatenate) from keras.utils import Sequence, to_categorical . Another crucial preprocessing step is normalization, for which we will be using this function: . def audio_norm(data): max_data = np.max(data) min_data = np.min(data) data = (data-min_data)/(max_data-min_data+1e-6) return data-0.5 . At this point we must decide in which format we will provide the network input. The dataset samples are given as raw audio data files, which could be directly used as input. However this has several disadvantages, one of them being the extensive memory usage. Loading the entire dataset into memory might exceed our capacities. A so-called data generator can provide relief. It loads the samples one by one in real-time during training and testing instead of using the naive approach of loading all samples at once. The code for such a data generator can be found at https://stanford.edu/~shervine/blog/keras-how-to-generate-data-on-the-fly. . Still, computations on large data are more time-consuming, especially when they are loaded into memory on-the-fly like it is the case for a data generator. A better idea might be to extract features from the raw audio files and use these as input. This essentially compresses the input, which makes the use of a data generator unnecessary and greatly accelerates the training process. . Therefore as a processing step, we are extracting so-called MFCC audio features from our input data using the Librosa library. The MFCC data are created one by one for each sample and stored in a variable X. This process is quite time-consuming. After it is done, we finally normalize the generated input data. . def prepare_data(df, data_dir): dim = (n_mfcc, 1+(int(np.floor(audio_length/512))), 1) X = np.empty(shape=(df.shape[0], dim[0], dim[1], 1)) input_length = audio_length #create librosa file for i, fname in enumerate(df.index): file_path = data_dir + fname data, _ = librosa.core.load(file_path, sr=sampling_rate, res_type=&quot;kaiser_fast&quot;) # Random offset / Padding if len(data) &gt; input_length: max_offset = len(data) - input_length offset = np.random.randint(max_offset) data = data[offset:(input_length+offset)] else: if input_length &gt; len(data): max_offset = input_length - len(data) offset = np.random.randint(max_offset) else: offset = 0 data = np.pad(data, (offset, input_length - len(data) - offset), &quot;constant&quot;) #extract mfcc features data = librosa.feature.mfcc(data, sr=sampling_rate, n_mfcc=n_mfcc) data = np.expand_dims(data, axis=-1) #save them and do it for each file, return X X[i,] = data return X . X_train = prepare_data(train, &#39;drive/MyDrive/datasets/FSDKaggle2018.audio_train/&#39;) X_test = prepare_data(test, &#39;drive/MyDrive/datasets/FSDKaggle2018.audio_test/&#39;) #TODO: what does to_catego y_train = to_categorical(train.label_idx, num_classes=n_classes) # normalize the data using the mean and deviation from the training set mean = np.mean(X_train, axis=0) std = np.std(X_train, axis=0) X_train = (X_train - mean)/std X_test = (X_test - mean)/std . Now, we build our network model. The model starts with a convolutional layer followed by ReLU activation and a maxpool layer. Batch normalization is applied by inserting the corresponding layer before the activation function. This structure is repeated 3 more times, then the model ends with a fully connected layer of size 64 with batch normalization. The final output is given by a softmax layer which produces a probability distribution over the 41 classes. . As a loss function, we use cross entropy, and the Adam optimizer is used for training. . sampling_rate=16000 audio_duration=2 n_classes=41 n_folds_=10 learning_rate=0.0001 max_epochs=50 n_mfcc=20 audio_length = sampling_rate * audio_duration dim = (audio_length, 1) batch_size=64 # Generating and compiling the model def getModel(): input_length = audio_length inp = Input(shape=(dim[0], dim[1],1)) x = Convolution2D(32, (4,10), padding=&quot;same&quot;)(inp) x = BatchNormalization()(x) x = Activation(&quot;relu&quot;)(x) x = MaxPool2D()(x) x = Convolution2D(32, (4,10), padding=&quot;same&quot;)(x) x = BatchNormalization()(x) x = Activation(&quot;relu&quot;)(x) x = MaxPool2D()(x) x = Convolution2D(32, (4,10), padding=&quot;same&quot;)(x) x = BatchNormalization()(x) x = Activation(&quot;relu&quot;)(x) x = MaxPool2D()(x) x = Convolution2D(32, (4,10), padding=&quot;same&quot;)(x) x = BatchNormalization()(x) x = Activation(&quot;relu&quot;)(x) x = MaxPool2D()(x) x = Flatten()(x) x = Dense(64)(x) x = BatchNormalization()(x) x = Activation(&quot;relu&quot;)(x) out = Dense(n_classes, activation=softmax)(x) model = models.Model(inputs=inp, outputs=out) opt = optimizers.Adam(learning_rate) model.compile(optimizer=opt, loss=losses.categorical_crossentropy, metrics=[&#39;acc&#39;]) return model . To prepare the output, we are converting the raw labels to integer indices and are setting the filename as the index for the train and test data: . LABELS = list(train.label.unique()) label_idx = {label: i for i, label in enumerate(LABELS)} # set the index row for train and test to the name of the file train.set_index(&quot;fname&quot;, inplace=True) test.set_index(&quot;fname&quot;, inplace=True) train[&quot;label_idx&quot;] = train.label.apply(lambda x: label_idx[x]) . Finally, we are training the network using KFold, which is a cross-validator that splits the data in train sets and test sets. For this, it divides the entire dataset in K folds. During training, one of these folds is used once for validation, whereas the other k-1 folds are used as a training set. . from sklearn.model_selection import KFold kf = KFold(n_splits=2) for i, (train_index, test_index) in enumerate(kf.split(X_train)): X_t, X_te = X_train[train_index], X_train[test_index] y_t, y_te = y_train[train_index], y_train[test_index] print(&quot;#&quot;*50) print(&quot;Fold: &quot;, i) model = getModel() checkpoint = ModelCheckpoint(&#39;best_%d.h5&#39;%i, monitor=&#39;val_loss&#39;, verbose=1, save_best_only=True) early = EarlyStopping(monitor=&quot;val_loss&quot;, mode=&quot;min&quot;, patience=5) tb = TensorBoard(log_dir=&#39;./logs/&#39; + PREDICTION_FOLDER + &#39;/fold_%i&#39;%i, write_graph=True) callbacks_list = [checkpoint, early, tb] history = model.fit(X_t, y_t, validation_data=(X_te, y_te), callbacks=callbacks_list, batch_size=64, epochs=30) model.load_weights(&#39;best_%d.h5&#39;%i) predictions = model.predict(X_train, batch_size=64, verbose=1) np.save(PREDICTION_FOLDER + &quot;/train_predictions_%d.npy&quot;%i, predictions) predictions = model.predict(X_test, batch_size=64, verbose=1) np.save(PREDICTION_FOLDER + &quot;/test_predictions_%d.npy&quot;%i, predictions) top_3 = np.array(LABELS)[np.argsort(-predictions, axis=1)[:, :3]] predicted_labels = [&#39; &#39;.join(list(x)) for x in top_3] test[&#39;label&#39;] = predicted_labels test[[&#39;label&#39;]].to_csv(PREDICTION_FOLDER + &quot;/predictions_%d.csv&quot;%i) . Results and Conclusion . Training for 30 epochs results in a promising training accuracy of around 90%. However the network currently shows strong overfitting, as the accuracy on the validation set barely reaches 40%. Further investigation is needed in order to find ways to reduce this massive gap. . Future work includes exploring other ways to obtain information from sounds, for example predicting the distance from a sound source given a sound sample. . References . 1. https://www.kaggle.com/fizzbuzz/beginner-s-guide-to-audio-data/↩ . 2. https://en.wikipedia.org/wiki/Pulse-code_modulation↩ .",
            "url": "https://thegadgeteer.github.io/Predicting-from-Sound-Blog/jupyter/2021/05/26/blog_old.html",
            "relUrl": "/jupyter/2021/05/26/blog_old.html",
            "date": " • May 26, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://thegadgeteer.github.io/Predicting-from-Sound-Blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://thegadgeteer.github.io/Predicting-from-Sound-Blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://thegadgeteer.github.io/Predicting-from-Sound-Blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://thegadgeteer.github.io/Predicting-from-Sound-Blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}